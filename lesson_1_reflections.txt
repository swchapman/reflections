How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By using diff, I was able to quickly see what lines had changed, which saved me from having to manually check each line of code for errors or typos.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    By having access to the entire history of a file, you would be able to see which updates changed how things worked.  If a new code item you entered conflicts with something introduced in the last update, it might be possible to check if your change would have worked better with the code from two versions ago.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually choosing commit moments allows you to create logical versions of files. For example, committing after adding a new feature makes sense, because then you can see that it was the new feature that changed things.  If you have automatic versions, you'll have to sift through all the saved versions to see where the problem occurred.  However, the problem with manual choosing is that it relies on the user to commit at logical points, which is a subjective interval.  Automatic saves would ensure that if the user left the keyboard for an extended time and the system crashed or shut down, there is a chance that he hasn't lost all of his work.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git allows that projects may consist of multiple inter-related files, while Google Docs assumes each document is an independent entity.

How can you use the commands git log and git diff to view the history of files?

    "git log" allows you to see the different versions that have been committed and (hopefully) why this new version is different from the previous version.  "git diff" allows you to see what lines were changed/added between two versions.q

How might using version control make you more confident to make changes that
could break something?

    You'd know that you could easily revert back to a working version quickly.

Now that you have your workspace set up, what do you want to try using Git for?

    Version control on websites and bash scripts I've created.

